#!/usr/bin/env python3
import math
import sys
import copy
INF = math.inf

# Undirected graph to model network topology
class Graph:
    # Constructor - Initialises adjacency list
    def __init__(self):
        self.adj_list = {}

    # Add edge - Adds edge between two nodes with given weight
    # Parameters: node1, node2, weight
    def add_edge(self, node1, node2, weight):
        if node1 not in self.adj_list:
            self.adj_list[node1] = {}
        if node2 not in self.adj_list:
            self.adj_list[node2] = {}

        self.adj_list[node1][node2] = weight
        self.adj_list[node2][node1] = weight

    # Remove edge - Removes edge between two nodes
    # Parameters: node1, node2
    def remove_edge(self, node1, node2):
        if node1 not in self.adj_list:
            return
        if node2 not in self.adj_list:
            return

        del self.adj_list[node1][node2]
        del self.adj_list[node2][node1]

    # Get neighbors - Returns list of neighbors of given node
    # Parameters: node
    def get_neighbors(self, node):
        return self.adj_list[node]

    # Print graph - Prints adjacency list (for debugging)
    def print_graph(self):
        for node, neighbors in self.adj_list.items():
            print(f"Node {node}: {neighbors}")

class Router:
    # Constructor - Initialises router with given name
    # Parameters: name
    def __init__(self, name):
        self._name = name
        self.distance_table = {}
        self.updates_to_process = [] # update[i] = (source, distance_table)
        self.routing_table = {}
        self.update_neighbors = False

    # Initialises distance table with all nodes
    # Parameters: list of all nodes (strings)
    def initialize_distance_table(self, nodes):
        nodes = nodes.copy()
        if self._name in nodes:
            nodes.remove(self._name)
        for node in nodes:
            self.distance_table[node] = {}
            for n in nodes:
                self.distance_table[node][n] = float('inf')
    
    # Prints distance table
    def print_distance_table(self):
        nodes = sorted(self.distance_table.keys())
        header = [' '] + nodes

        # Print table header
        print('\t'.join(header))

        # Print table rows
        for node in nodes:
            row = [node] + [str(self.distance_table[node][n]).replace('inf', 'INF') for n in nodes]
            print('\t'.join(row))

    # Updates distance table with own costs to neighbors
    # Parameters: graph, list of all routers
    def update_self(self, graph, routers_list):
        neighbors = graph.get_neighbors(self._name)
        for neighbor in neighbors:
            self.distance_table[neighbor][neighbor] = graph.adj_list[self._name][neighbor]

        # If not a neighbor, set cost to infinity for all destinations 
        for router in routers_list:
            if router._name not in neighbors and router._name != self._name:
                for dest in self.distance_table:
                    self.distance_table[dest][router._name] = INF
        self.update_neighbors = True

    # Sends updates to neighbors
    # Parameters: list of neighbors, list of all routers
    def send_updates(self, neighbors, routers_list): 
        if self.update_neighbors == True: 
            for router in routers_list:
                if router._name in neighbors:
                    router.updates_to_process.append((self._name, copy.deepcopy(self.distance_table)))
        self.update_neighbors = False

    # Processes received updates
    def process_received_tables(self):
        for update in self.updates_to_process:
            received_from = update[0] 
            received_distance_table = update[1]
            for dest in self.distance_table:
                if dest == received_from:
                    continue
                for via_node in self.distance_table[dest]: 
                    if via_node == received_from: 
                        previous_cost = self.distance_table[dest][via_node]
                        cost_to_received_from = self.distance_table[received_from][received_from]
                        total_cost = cost_to_received_from + self.find_min_cost(received_distance_table, dest)
                        self.distance_table[dest][received_from] = total_cost
                        if previous_cost != total_cost:
                            self.update_neighbors = True

        # Reset updates to process
        self.updates_to_process = []

    # Finds min cost to destination
    # Parameters: distance table, destination
    def find_min_cost(self, distance_table, dest): 
        min_cost = INF
        for node in distance_table[dest]:
            if distance_table[dest][node] < min_cost:
                min_cost = distance_table[dest][node]
        return min_cost
    
    # Creates routing table
    def create_routing_table(self):
        # Find min cost for each destination
        for dest in self.distance_table:
            min_cost = INF
            min_cost_node = INF
            for node in self.distance_table[dest]:
                if self.distance_table[dest][node] < min_cost:
                    min_cost = self.distance_table[dest][node]
                    min_cost_node = node
            self.routing_table[dest] = (min_cost_node, min_cost)

    # Prints routing table
    def print_routing_table(self):
        self.create_routing_table()
        print(f"{self._name} Routing Table:")
        for dest in sorted(self.routing_table.keys()):
            print(f"{dest},{self.routing_table[dest][0]},{self.routing_table[dest][1]}")
        print()

    # Processes updates after graph changes
    # Parameters: graph, list of all routers
    def process_after_update(self, graph, routers_list): 
        # Clear all updates
        self.updates_to_process = []
        original_distance_table = copy.deepcopy(self.distance_table)

        # Get neighbors costs
        neighbors = graph.get_neighbors(self._name)
        for neighbor in neighbors:
            self.distance_table[neighbor][neighbor] = graph.adj_list[self._name][neighbor]

        # If not a neighbor, set cost to infinity for all destinations
        for dest in self.distance_table: 
            for via_node in self.distance_table[dest]: 
                if via_node not in neighbors:
                    self.distance_table[dest][via_node] = INF
        
        for router in routers_list: 
            if (router._name in neighbors): 
                for dest in router.routing_table: 
                    if dest == self._name: 
                        continue
                    cost_to_via_node = self.distance_table[router._name][router._name]
                    via_node_to_dest = router.routing_table[dest][1]
                    self.distance_table[dest][router._name] = cost_to_via_node + via_node_to_dest
        
        if self.distance_table != original_distance_table: 
            self.update_neighbors = True

    # Prints updates to process (for debugging)
    def print_updates(self):
        print(f"{self._name} Updates to Process:")
        for update in self.updates_to_process:
            print(update)
        print()

# # # # # # # # # # # # # # # # #
# # # # # # MAIN START  # # # # # 
# # # # # # # # # # # # # # # # #
nodes_list = []

# Create graph
graph = Graph()

# Read in nodes
line = sys.stdin.readline().strip()
while line != "DISTANCEVECTOR":
    nodes_list.append(line)
    router = Router(line)
    graph.adj_list[router._name] = {}
    line = sys.stdin.readline().strip()

# Read in edges
line = sys.stdin.readline().strip()
while line != "UPDATE":
    node1, node2, weight = line.split()
    graph.add_edge(node1, node2, int(weight))
    line = sys.stdin.readline().strip()

# Run til convergence
routers_list = []
for node in nodes_list:
    router = Router(node)
    router.initialize_distance_table(nodes_list)
    router.update_self(graph, routers_list)
    routers_list.append(router)

# Print initial distance table
for router in routers_list:
    print(f"{router._name} Distance Table at t=0")
    router.print_distance_table()
    print()

# Run algorithm, printing at each t until convergence
t = 1
previous_distance_table = {}
for router in routers_list: #Store previous distance table
    previous_distance_table[router._name] = copy.deepcopy(router.distance_table)
while True:
    for router in routers_list:
        router.send_updates(graph.get_neighbors(router._name), routers_list)
    for router in routers_list:
        router.process_received_tables()
    # Check if all distance tables are the same
    if all([router.distance_table == previous_distance_table[router._name] for router in routers_list]):
        break
    previous_distance_table = {}
    for router in routers_list: #Store previous distance table
        previous_distance_table[router._name] = copy.deepcopy(router.distance_table)
    # Print distance table
    for router in routers_list:
        print(f"{router._name} Distance Table at t={t}")
        router.print_distance_table()
        print()
    t += 1
    if all([router.update_neighbors == False for router in routers_list]):
        break

# Print routing table
for router in routers_list:
    router.print_routing_table()

# Take in updates to graph 
while True:
    line = sys.stdin.readline().strip()
    if line == "END":
        break
    node1, node2, weight = line.split()
    if int(weight) == -1: 
        graph.remove_edge(node1, node2)
    else: 
        graph.add_edge(node1, node2, int(weight))

# Store original distance table
previous_distance_table = {}
for router in routers_list:
    previous_distance_table[router._name] = copy.deepcopy(router.distance_table)

# Process initial changes to graph
for router in routers_list:
    router.process_after_update(graph, routers_list)

# If nothing changed, exit
if all([router.distance_table == previous_distance_table[router._name] for router in routers_list]):
    sys.exit()

# Print distance table
for router in routers_list:
    print(f"{router._name} Distance Table at t={t}")
    router.print_distance_table()
    print()
t+= 1

previous_distance_table = {}
for router in routers_list: #Store previous distance table
    previous_distance_table[router._name] = copy.deepcopy(router.distance_table)
while True:
    for router in routers_list:
        router.send_updates(graph.get_neighbors(router._name), routers_list)
    for router in routers_list:
        router.process_received_tables()
    # Check if all distance tables are the same
    if all([router.distance_table == previous_distance_table[router._name] for router in routers_list]):
        break
    previous_distance_table = {}
    for router in routers_list: #Store previous distance table
        previous_distance_table[router._name] = copy.deepcopy(router.distance_table)
    # Print distance table
    for router in routers_list:
        print(f"{router._name} Distance Table at t={t}")
        router.print_distance_table()
        print()
    t += 1
    if all([router.update_neighbors == False for router in routers_list]):
        break

# Print routing table
for router in routers_list:
    router.print_routing_table()